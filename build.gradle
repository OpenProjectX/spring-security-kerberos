buildscript {
	dependencies {
		classpath "io.spring.javaformat:spring-javaformat-gradle-plugin:$springJavaformatVersion"
		classpath 'io.spring.nohttp:nohttp-gradle:0.0.10'
		classpath "io.freefair.gradle:aspectj-plugin:6.6-rc1"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
		classpath "com.netflix.nebula:nebula-project-plugin:8.2.0"
	}
	repositories {
		gradlePluginPortal()
	}
}

apply plugin: 'io.spring.nohttp'
apply plugin: 'locks'
apply plugin: 's101'
apply plugin: 'io.spring.convention.root'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.springframework.security.update-dependencies'
apply plugin: 'org.springframework.security.update-version'
apply plugin: 'org.springframework.security.sagan'
apply plugin: 'org.springframework.github.milestone'
apply plugin: 'org.springframework.github.changelog'
apply plugin: 'org.springframework.github.release'

group = 'io.github.openprojectx.security.kerberos'

ext.snapshotBuild = version.contains("SNAPSHOT")
ext.releaseBuild = version.contains("SNAPSHOT")
ext.milestoneBuild = !(snapshotBuild || releaseBuild)

repositories {
	mavenCentral()
}

subprojects {
	plugins.withType(JavaPlugin) {
		project.sourceCompatibility='1.8'
	}
	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
		options.compilerArgs.add("-parameters")
	}

}

allprojects {
	if (!['spring-security-kerberos-bom', 'spring-security-docs'].contains(project.name)) {
		apply plugin: 'io.spring.javaformat'
		apply plugin: 'checkstyle'

		pluginManager.withPlugin("io.spring.convention.checkstyle", { plugin ->
//			configure(plugin) {
				dependencies {
					checkstyle "io.spring.javaformat:spring-javaformat-checkstyle:$springJavaformatVersion"
				}
				checkstyle {
					toolVersion = '8.34'
				}
//			}
		})

		if (project.name.contains('sample')) {
			tasks.whenTaskAdded { task ->
				if (task.name.contains('format') || task.name.contains('checkFormat') || task.name.contains("checkstyle")) {
					task.enabled = false
				}
			}
		}
	}

	tasks.withType(JavaCompile).configureEach {
		javaCompiler = javaToolchains.compilerFor {
			languageVersion = JavaLanguageVersion.of(8)
		}
	}

	dependencies {
//		runtimeOnly "org.apache.directory.server:apacheds-core"
		gradleApi()
	}
}

nohttp {
	source.exclude "buildSrc/build/**"
	source.exclude "samples/**"

}
